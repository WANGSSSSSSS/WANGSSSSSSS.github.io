<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>异常控制流（一）</title>
    <link href="/2021/03/28/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/03/28/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="异常控制流（一）"><a href="#异常控制流（一）" class="headerlink" title="异常控制流（一）"></a>异常控制流（一）</h3><h3 id="非本地跳转"><a href="#非本地跳转" class="headerlink" title="非本地跳转"></a>非本地跳转</h3><p>c语言提供了用户级别的异常控制流形式，成为非本地跳转。这个机制可以实现从一个函数直接转移到另一个函数，而不是遵循基本的调用过程（参数压戰+call function）。非本地跳转机制主要通过setjump函数和longjump函数实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">setjmp</span><span class="hljs-params">(jmp_buf env)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sigsetjmp</span><span class="hljs-params">(sigjmp_buf env, <span class="hljs-keyword">int</span> savesigs)</span></span>;<br><br><span class="hljs-comment">// 返回：setjmp 返回 0，longjmp 返回非零。</span><br></code></pre></td></tr></table></figure><h4 id="函数-setjump"><a href="#函数-setjump" class="headerlink" title="函数 setjump"></a>函数 setjump</h4><p>setjump 函数的作用相当于保存复活点，因此函数参数为一个缓冲区，作用就是将环境信息保存起来，这个信息包括pc，栈指针以及一些通用的寄存器（rax，rbx，rdi..）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">jmp_buf env;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    rc = setjmp(env); <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数-longjump"><a href="#函数-longjump" class="headerlink" title="函数 longjump"></a>函数 longjump</h4><p>longjump实现从刚才保存的复活点重新启动，然后触发一个setjump调用的返回</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">jmp_buf env;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    rc = setjmp(env); <br>    longjump(env, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一些奇怪的东西：</p><ul><li>setjump多次返回：调用一次，longjump调用又从那里返回一次</li><li>setjump返回值：第一次调用返回0，longjump调用返回的时候返回值是savesigs，这个数字被用来解码，至于原因，后文会说</li><li>longjump不返回</li></ul><p>这里根据我对signal机制的了解，大概实现思路已经有了</p><h3 id="非本地跳转应用"><a href="#非本地跳转应用" class="headerlink" title="非本地跳转应用"></a>非本地跳转应用</h3><h4 id="高性能异常处理"><a href="#高性能异常处理" class="headerlink" title="高性能异常处理"></a>高性能异常处理</h4><p>直接随地跳转，如果是在递归过程中间出现了异常，大量的递归栈要被解开，会浪费大量时间，通过非本地跳转可以实现快速上报错误，返回值指定了错误码，用户可以用来制定解码规则，甄别错误类型。</p><p><strong>高级语言的异常处理</strong></p><p>C++ 和 Java 提供的异常机制是较高层次的，是 C 语言的 setjmp 和 longjmp 函数的更加结构化的版本。你可以把 try 语句中的 catch 子句看做类似于 setjmp 函数。相似地，throw 语句就类似于 longjmp 函数。</p><h3 id="非本地跳转实验"><a href="#非本地跳转实验" class="headerlink" title="非本地跳转实验"></a>非本地跳转实验</h3><p>我只是简单的复制粘贴了书上的代码，这个东西挺好玩的，不过我懒得写了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;setjmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><br>jmp_buf buf;<br><br><span class="hljs-keyword">int</span> error1 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> error2 = <span class="hljs-number">1</span>;<br><br>void foo(void), bar(void);<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span> (setjmp(buf)) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>        foo();<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error1 condition in foo\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Detected an error2 condition in foo\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Unknown error condition in foo\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/* Deeply nested function foo */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (error1)<br>        longjmp(buf, <span class="hljs-number">1</span>);<br>    bar();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bar</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (error2)<br>        longjmp(buf, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h5><p><img src="/images/image-20210328171319221.png"></p><h3 id="非本地跳转实现原理"><a href="#非本地跳转实现原理" class="headerlink" title="非本地跳转实现原理"></a>非本地跳转实现原理</h3><h4 id="基本数据结构与函数定义"><a href="#基本数据结构与函数定义" class="headerlink" title="基本数据结构与函数定义"></a>基本数据结构与函数定义</h4><img src="/images/image-20210328171757424.png" alt="image-20210328171757424" style="zoom: 67%;" /><p>jmp buf是一个jmp buf tag的指针，这种定义方式还挺奇怪的，以前没见过</p><p><strong>__jmpbuf</strong>   : 一个int数组 int[8]</p><p><strong>__sigset_t</strong> : 老熟人了，大致已经猜到底层就是signal那套机制了</p><img src="/images/image-20210328172313775.png" alt="image-20210328172313775" style="zoom:80%;" /><h5 id="setjump-函数"><a href="#setjump-函数" class="headerlink" title="setjump 函数"></a>setjump 函数</h5><img src="/images/image-20210328171704299.png" alt="image-20210328171704299" style="zoom: 67%;" /><h5 id="longjump函数"><a href="#longjump函数" class="headerlink" title="longjump函数"></a>longjump函数</h5><img src="/images/image-20210328172518149.png" alt="image-20210328172518149" style="zoom:80%;" /><h4 id="实现原理梳理："><a href="#实现原理梳理：" class="headerlink" title="实现原理梳理："></a>实现原理梳理：</h4><h5 id="setjump系统调用发生："><a href="#setjump系统调用发生：" class="headerlink" title="setjump系统调用发生："></a>setjump系统调用发生：</h5><p>现在处于内核里面了，寄存器按照x86的32位描述，这块应该没啥问题，很好理解</p><p>上面是用户栈，下面是内核栈，最下面是寄存器状态</p><p><img src="/images/image-20210328173109840.png" alt="image-20210328173109840"></p><h5 id="set过程："><a href="#set过程：" class="headerlink" title="set过程："></a>set过程：</h5><ol><li>根据系统调用传入的参数，在用户栈中找到env：env（这是一个指针其实，前面数据结构有提到），将寄存器保存下来，（那八大金刚寄存器），从前面的数据结构可以看出，有字长设置，自己实现需要注意这个问题</li><li>退出，这是第一次调用返回，也是最正常的一次</li></ol><p><img src="/images/image-20210328173412838.png" alt="image-20210328173412838"></p><h4 id="longjump过程："><a href="#longjump过程：" class="headerlink" title="longjump过程："></a>longjump过程：</h4><ol><li><p>根据参数找到保存寄存器的地方，恢复寄存器到核心栈</p><p>注意：这里比signal简单一点，不需要存上下文，因为是直接返回</p></li><li><p>恢复之后，内核栈里面保存的上下文变成了esp指向了set的时候的状态，eip指向了返回地址</p></li><li><p>修改返回值：根据第三个参数，修改eax</p></li><li><p>退出，这个时候操作系统根据tss寄存器找到上下文，恢复好寄存器，然后第二次返回setjump</p></li></ol><p><img src="/images/image-20210328174109255.png" alt="image-20210328174109255"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>这个过程其实很简单，比signal简单多了，因为是一个进程自己搞自己，不牵扯页表切换，就这样吧</p><p>​                                                                                                                我是王帅，一个西工大的本科屌丝</p>]]></content>
    
    
    <categories>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>cs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常控制流</title>
    <link href="/2021/03/28/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/"/>
    <url>/2021/03/28/%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>os</category>
      
    </categories>
    
    
    <tags>
      
      <tag>os</tag>
      
      <tag>cs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Edit_Distance</title>
    <link href="/2021/03/27/Edit-Distance/"/>
    <url>/2021/03/27/Edit-Distance/</url>
    
    <content type="html"><![CDATA[<p>Given two strings <code>word1</code> and <code>word2</code>, return <em>the minimum number of operations required to convert <code>word1</code> to <code>word2</code></em>.</p><p>You have the following three operations permitted on a word:</p><ul><li>Insert a character</li><li>Delete a character</li><li>Replace a character</li></ul><p><strong>Example 1:</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xl">Input: word1 = <span class="hljs-string">&quot;horse&quot;</span>, word2 = <span class="hljs-string">&quot;ros&quot;</span><br>Output: <span class="hljs-number">3</span><br>Explanation: <br><span class="hljs-function"><span class="hljs-title">horse</span> -&gt;</span> rorse (replace <span class="hljs-string">&#x27;h&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">rorse</span> -&gt;</span> rose (remove <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">rose</span> -&gt;</span> ros (remove <span class="hljs-string">&#x27;e&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xl">Input: word1 = <span class="hljs-string">&quot;intention&quot;</span>, word2 = <span class="hljs-string">&quot;execution&quot;</span><br>Output: <span class="hljs-number">5</span><br>Explanation: <br><span class="hljs-function"><span class="hljs-title">intention</span> -&gt;</span> inention (remove <span class="hljs-string">&#x27;t&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">inention</span> -&gt;</span> enention (replace <span class="hljs-string">&#x27;i&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">enention</span> -&gt;</span> exention (replace <span class="hljs-string">&#x27;n&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;x&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">exention</span> -&gt;</span> exection (replace <span class="hljs-string">&#x27;n&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&#x27;c&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">exection</span> -&gt;</span> execution (insert <span class="hljs-string">&#x27;u&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li><li><code>word1</code> and <code>word2</code> consist of lowercase English letters.</li></ul><p><strong>Solution:</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minDistance</span><span class="hljs-params">(string s1, string s2)</span> </span>&#123;<br>     <span class="hljs-keyword">int</span> m=s1.<span class="hljs-built_in">size</span>();<br>     <span class="hljs-keyword">int</span> n=s2.<span class="hljs-built_in">size</span>();<br>     <span class="hljs-keyword">int</span> t[m+<span class="hljs-number">1</span>][n+<span class="hljs-number">1</span>];<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;m+<span class="hljs-number">1</span>;i++)<br>       t[i][<span class="hljs-number">0</span>]=i;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;n+<span class="hljs-number">1</span>;i++)<br>       t[<span class="hljs-number">0</span>][i]=i;<br>     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m+<span class="hljs-number">1</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;j&lt;n+<span class="hljs-number">1</span>;j++)&#123;<br>           <span class="hljs-keyword">if</span>(s1[i<span class="hljs-number">-1</span>]==s2[j<span class="hljs-number">-1</span>])<br>              t[i][j]=t[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>           <span class="hljs-keyword">else</span><br>             t[i][j]=<span class="hljs-number">1</span>+<span class="hljs-built_in">min</span>(t[i<span class="hljs-number">-1</span>][j], <span class="hljs-built_in">min</span>(t[i][j<span class="hljs-number">-1</span>], t[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>])); <span class="hljs-comment">//remove, insert, replace</span><br>        &#125;<br>     &#125; <br>     <span class="hljs-keyword">return</span> t[m][n];<br>   &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h4><p>画图：</p><p>当前状态如下：</p><p><img src="/images/image-20210327194323030.png" alt="image-20210327194323030"></p><p>如果两字符串$s1[i]=s2[j]$：相当于什么也不用做，所有操作都在前面</p><h4 id="remove："><a href="#remove：" class="headerlink" title="remove："></a>remove：</h4><p>这里因为$s1[i]\neq s2[j]$:</p><p><img src="/images/image-20210327195102599.png" alt="image-20210327195102599"></p><h4 id="insert："><a href="#insert：" class="headerlink" title="insert："></a>insert：</h4><p><img src="/images/image-20210327194943592.png" alt="image-20210327194943592"></p><h4 id="replace："><a href="#replace：" class="headerlink" title="replace："></a>replace：</h4><p><img src="/images/image-20210327194815200.png" alt="image-20210327194815200"></p><p>动态规划的方程：$f(i,j) = \begin{cases} 1+min(f(i-1,j),\ f(i,j-1) \ f(i-1,j-1)) &amp; str1[1] \neq str2[j] \ f(i-1,j-1) &amp; \text{str1[i] = str2[j]} \end{cases}$</p>]]></content>
    
    
    <categories>
      
      <category>algorithem</category>
      
      <category>dp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>algorithem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>opencv和cuda</title>
    <link href="/2021/03/27/opencv%E5%92%8Ccuda/"/>
    <url>/2021/03/27/opencv%E5%92%8Ccuda/</url>
    
    <content type="html"><![CDATA[<h2 id="opencv4-5-和-cuda一起编译"><a href="#opencv4-5-和-cuda一起编译" class="headerlink" title="opencv4.5 和 cuda一起编译"></a>opencv4.5 和 cuda一起编译</h2><p>opencv现在越写越大，原来简单的cmake配置现在变得烦的一批，为了下一次别人问我的时候，我不尴尬，我决定这次把编译方案记录下来，也好流芳百世（雾）.</p><ul><li><p>cmake and git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install cmake<br>sudo apt install git<br></code></pre></td></tr></table></figure></li><li><p>opencv  download</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/opencv/opencv.git<br>git clone https://github.com/opencv/opencv_contrib.git<br></code></pre></td></tr></table></figure></li><li><p>cuda 11</p><p>此处建议直接去官网下载，并不会浪费很多时间，下载速度也很快</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin<br>sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600wget https://developer.download.nvidia.com/compute/cuda/11.2.2/local_installers/cuda-repo-ubuntu2004-11-2-local_11.2.2-460.32.03-1_amd64.deb<br>sudo dpkg -i cuda-repo-ubuntu2004-11-2-local_11.2.2-460.32.03-1_amd64.deb<br>sudo apt-key add /var/cuda-repo-ubuntu2004-11-2-local/7fa2af80.pub<br>sudo apt-get update<br>sudo apt-get -y install cuda<br></code></pre></td></tr></table></figure></li><li><p>cmake 编译设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -DOPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules<br>      -DWITH_CUDA=ON <br>      -DCUDA_FAST_MATH=ON<br>      -DWITH_CUBLAS=ON  <br>      -DCUDA_ARCH_PTX=7.5 <br>      -DCUDA_ARCH_BIN=7.5 <br>      ..<br></code></pre></td></tr></table></figure><p>解释一下：</p><p>英明的英伟达对显卡计算能力做了分级，可以自己搜一下就明白那个算力数字的含义，其实可以感觉到这是架构不同或者说硬件结构的限制，因此需要区别版本，如果不加那两句进行编译，也是可以的，这样表示默认，全部cuda支持硬件架构你都要编译，时间上会花费很久。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>environment setup</category>
      
    </categories>
    
    
    <tags>
      
      <tag>opencv</tag>
      
      <tag>cuda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RBTree</title>
    <link href="/2021/03/27/RBTree/"/>
    <url>/2021/03/27/RBTree/</url>
    
    <content type="html"><![CDATA[<h3 id="Red-Black-Tree"><a href="#Red-Black-Tree" class="headerlink" title="Red Black Tree"></a>Red Black Tree</h3><p>红黑树很不错，我写得贼6</p>]]></content>
    
    
    <categories>
      
      <category>algorithm</category>
      
      <category>tree</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>rbtree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/27/hello-world/"/>
    <url>/2021/03/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
